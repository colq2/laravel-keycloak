<?php

namespace colq2\Tests\Keycloak\Unit;

use colq2\Keycloak\KeycloakAuthenticator;
use colq2\Keycloak\KeycloakProvider;
use colq2\Keycloak\SocialiteOIDCUser;
use colq2\Tests\Keycloak\Stubs\KeycloakUser;
use colq2\Tests\Keycloak\TestCase;
use Laravel\Socialite\Contracts\Factory as Socialite;
use Mockery;

class AuthenticatorTest extends TestCase
{
    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testCreatesAndAuthenticatesUser()
    {
        $userArray = [
            'sub' => 'subject-id',
            'preferred_username' => 'johndoe',
            'name' => 'John Doe',
            'email' => 'john.doe@example.com',
            'picture' => '',
        ];
        $socialiteUser = new SocialiteOIDCUser();
        $socialiteUser->setRaw($userArray)
            ->map($userArray);

        $provider = Mockery::mock(KeycloakProvider::class);
        $provider->shouldReceive('user')
            ->andReturn($socialiteUser);

        $socialite = Mockery::mock(Socialite::class);
        $socialite->shouldReceive('driver')
            ->with('keycloak')
            ->andReturn($provider);

        $this->app->instance(Socialite::class, $socialite);

        $authenticator = $this->app->make(KeycloakAuthenticator::class);

        if ($authenticator instanceof KeycloakAuthenticator) {

        }

        $authenticator->handleCallback();

        $user = auth()->user();

        $this->assertNotNull($user);
        $this->assertInstanceOf(KeycloakUser::class, $user);
        // Test it is in the database
        $this->assertDatabaseHas('users', [
            'sub' => 'subject-id',
            'username' => 'johndoe',
            'name' => 'John Doe',
            'email' => 'john.doe@example.com',
            'picture' => ''
        ]);
    }
}